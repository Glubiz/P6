/**
 * Encode a binary identifier to a string.
 *
 * @param id -
 *   identifier
 * @returns
 *   encoded string
 */
export declare function encodeId(id: ArrayBuffer): string;
/**
 * Decode a string into a binary identifier.
 *
 * @param input -
 *   string to decode
 * @returns
 *   decoded string
 */
export declare function decodeId(input: string): ArrayBuffer;
/**
 * Generate identifiers that can be used to represent nodes. These are a random
 * UUID, generates 16 bytes of data and sets the markers used for UUID v4.
 *
 * @returns
 *   buffer with id
 */
export declare function generateId(): ArrayBuffer;
/**
 * Helper that returns a buffer representing no identifier.
 *
 * @returns
 *   empty buffer
 */
export declare function noId(): ArrayBuffer;
/**
 * Check if two identifiers are the same.
 *
 * @param o1 -
 *   first buffer
 * @param o2 -
 *   second buffer
 * @returns
 *   `true` if buffers match
 */
export declare function sameId(o1: ArrayBuffer, o2: ArrayBuffer): boolean;
//# sourceMappingURL=ids.d.ts.map