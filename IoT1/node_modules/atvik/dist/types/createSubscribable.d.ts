import { ErrorStrategy } from './ErrorStrategy';
import { EventIteratorOptions } from './EventIteratorOptions';
import { Listener } from './Listener';
import { Subscribable } from './Subscribable';
/**
 * Function used to subscribe a listener.
 */
export declare type SubscribeFunction<This, Args extends any[]> = (listener: Listener<This, Args>) => void;
/**
 * Function used to unsubscribe a listener, should return if the listener was
 * subscribed or not.
 */
export declare type UnsubscribeFunction<This, Args extends any[]> = (listener: Listener<This, Args>) => void;
/**
 * Options for `createSubscribable`.
 */
export interface SubscribableOptions<This, Args extends any[]> {
    /**
     * Function used to subscribe a listener.
     */
    subscribe: SubscribeFunction<This, Args>;
    /**
     * Function used to unsubscribe a listener.
     */
    unsubscribe: UnsubscribeFunction<This, Args>;
    /**
     * Options to apply to iterators created by this subscribable.
     */
    defaultIterator?: EventIteratorOptions;
    /**
     * The error strategy to use by default.
     */
    defaultErrorStrategy?: ErrorStrategy;
}
/**
 * Create a Subscribable given a subscribe, unsubscribe and a once function.
 *
 * @param options -
 *   options used to create this subscribable
 * @returns
 *   instance of `Subscribable`
 */
export declare function createSubscribable<This, Args extends any[]>(options: SubscribableOptions<This, Args>): Subscribable<This, Args>;
//# sourceMappingURL=createSubscribable.d.ts.map