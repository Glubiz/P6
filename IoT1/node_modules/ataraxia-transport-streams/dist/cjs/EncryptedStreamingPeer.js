"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptedStreamingPeer = void 0;
const secret_stream_1 = __importDefault(require("@hyperswarm/secret-stream"));
const StreamingPeer_1 = require("./StreamingPeer");
/**
 * Peer that uses Node streams and automatically applies two-way encryption.
 * This delegates establishing the secure channel to `noise-secret-stream`
 * which uses [Noise Protocol Framework](https://noiseprotocol.org/) together
 * with [secret streams from libsodium](https://libsodium.gitbook.io/doc/secret-key_cryptography/secretstream).
 */
class EncryptedStreamingPeer extends StreamingPeer_1.StreamingPeer {
    setStream(stream, client) {
        this.secretStream = new secret_stream_1.default(client, stream);
        super.setStream(this.secretStream, client);
    }
    localPublicSecurity() {
        var _a;
        return (_a = this.secretStream) === null || _a === void 0 ? void 0 : _a.publicKey;
    }
    remotePublicSecurity() {
        var _a;
        return (_a = this.secretStream) === null || _a === void 0 ? void 0 : _a.remotePublicKey;
    }
}
exports.EncryptedStreamingPeer = EncryptedStreamingPeer;
//# sourceMappingURL=EncryptedStreamingPeer.js.map