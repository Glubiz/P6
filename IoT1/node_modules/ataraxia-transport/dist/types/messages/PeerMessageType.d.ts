/**
 * The types of data that a peer can send and receive.
 */
export declare enum PeerMessageType {
    /**
     * Generic ok message. Used at certain points during the initial
     * negotiation with a peer.
     */
    Ok = 0,
    /**
     * Generic reject message.
     */
    Reject = 1,
    /**
     * Hello data, initial message sent from a server when a client connects.
     */
    Hello = 2,
    /**
     * Select message, sent from the client to the server after the client has
     * received and selected the capabilities it wants.
     */
    Select = 3,
    /**
     * Bye, request a graceful disconnect from the peer.
     */
    Bye = 4,
    /**
     * Ping message, sent periodically by peers to make sure that other peers
     * know that they are available.
     */
    Ping = 5,
    /**
     * Pong message, sent as a reply when an incoming ping is received.
     */
    Pong = 6,
    /**
     * Authentication request, sent by the client after it has received an ok
     * for its select.
     */
    Auth = 7,
    /**
     * Additional authentication data, can be sent by both a client and a
     * server to provide additional data needed during authentication.
     */
    AuthData = 8,
    /**
     * Message that indicates that the client is ready to begin receiving
     * messages.
     */
    Begin = 9,
    /**
     * Information about the nodes a peer sees.
     */
    NodeSummary = 10,
    /**
     * Request for details about nodes.
     */
    NodeRequest = 11,
    /**
     * Details about nodes.
     */
    NodeDetails = 12,
    /**
     * Wrapped message to be forwarded.
     */
    Data = 13,
    /**
     * Acknowledgment of having received data.
     */
    DataAck = 14,
    /**
     * Rejection of data.
     */
    DataReject = 15
}
//# sourceMappingURL=PeerMessageType.d.ts.map