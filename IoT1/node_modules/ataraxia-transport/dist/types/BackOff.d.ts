/**
 * Options for `BackOff`.
 */
export interface BackOffOptions {
    /**
     * The delay to apply.
     */
    readonly delay: number;
    /**
     * The maximum delay.
     */
    readonly maxDelay: number;
    /**
     * The maximum jitter to apply.
     */
    readonly maxJitter?: number;
}
/**
 * BackOff implementation to help delaying actions such as resending data or
 * reconnecting to a peer. This implementation will double the delay and apply
 * an optional jitter
 */
export declare class BackOff {
    private readonly maxDelay;
    private readonly initialDelay;
    private readonly maxJitter;
    private attempt;
    private _nextDelay;
    constructor(options: BackOffOptions);
    /**
     * Reset the attempt.
     */
    reset(): void;
    /**
     * Get the delay for the next attempt.
     *
     * @returns
     *   number of milliseconds to wait
     */
    nextDelay(): number;
    /**
     * Get the next delay as a promise. The promise will resolve when delay
     * is reached.
     *
     * @returns
     *   promise that resolves when the next delay is reached
     */
    asPromise(): Promise<void>;
}
//# sourceMappingURL=BackOff.d.ts.map