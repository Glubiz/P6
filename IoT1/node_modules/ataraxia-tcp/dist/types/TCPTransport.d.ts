import { AbstractTransport, AuthProvider, TransportOptions } from 'ataraxia-transport';
import { TCPPeerDiscovery } from './TCPPeerDiscovery';
/**
 * Options that can be used for a TCP transport.
 */
export interface TCPTransportOptions {
    /**
     * Port number for server. If undefined a port will automatically be
     * assigned.
     */
    port?: number;
    /**
     * Discovery to use for finding related peers.
     */
    discovery?: TCPPeerDiscovery;
    /**
     * Authentication providers to use for this transport.
     */
    authentication: ReadonlyArray<AuthProvider>;
}
/**
 * TCP based transport.
 */
export declare class TCPTransport extends AbstractTransport {
    private readonly authProviders;
    private _port;
    private foundPeers;
    private discovery?;
    private server?;
    private servicePublisher?;
    private serviceDiscovery?;
    private readonly manualPeers;
    constructor(options: TCPTransportOptions);
    /**
     * Get the port number the transport was bound to.
     *
     * @returns
     *   port number, or `0` if no server was started
     */
    get port(): number;
    start(options: TransportOptions): Promise<boolean>;
    stop(): Promise<boolean>;
    addManualPeer(hostAndPort: {
        host: string;
        port: number;
    }): void;
    private connectToPeer;
}
//# sourceMappingURL=TCPTransport.d.ts.map