import { AuthClientFlow } from './AuthClientFlow';
import { AuthContext } from './AuthContext';
import { AuthProvider } from './AuthProvider';
import { AuthServerFlow } from './AuthServerFlow';
/**
 * Options for `SharedSecretAuth`. Used to provide the shared secret.
 */
export interface SharedSecretAuthOptions {
    /**
     * Secret that is shared. If this secret is a string it will be encoded
     * into a byte representation.
     */
    secret: ArrayBuffer | string;
}
/**
 * Shared secret authentication. Allows access to the network if both the
 * client and the server has access to the same secret.
 */
export declare class SharedSecretAuth implements AuthProvider {
    readonly id = "shared-secret";
    private readonly secret;
    constructor(options: SharedSecretAuthOptions);
    createClientFlow(context: AuthContext): AuthClientFlow;
    createServerFlow(context: AuthContext): AuthServerFlow;
}
//# sourceMappingURL=SharedSecretAuth.d.ts.map