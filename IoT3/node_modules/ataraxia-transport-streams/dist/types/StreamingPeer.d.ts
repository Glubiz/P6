/// <reference types="node" />
import { Duplex } from 'stream';
import { AbstractPeer, DisconnectReason, PeerMessage, PeerMessageType } from 'ataraxia-transport';
/**
 * Peer that connects via a binary streaming protocol.
 */
export declare class StreamingPeer extends AbstractPeer {
    protected stream?: Duplex;
    protected disconnected: boolean;
    /**
     * Get if a stream is available.
     *
     * @returns
     *   if a stream is currently set for this peer
     */
    hasStream(): boolean;
    /**
     * Set the stream being used for this peer.
     *
     * @param stream -
     *   duplex stream to use
     * @param client -
     *   if this peer is a client
     */
    protected setStream(stream: Duplex, client: boolean): void;
    /**
     * Handle disconnect event. In addition to the inherited behavior this will
     * destroy the socket.
     *
     * @param reason -
     *   the reason for this disconnect
     * @param err -
     *   optional error disconnect
     */
    protected handleDisconnect(reason: DisconnectReason, err?: Error): void;
    protected requestDisconnect(reason: DisconnectReason, err?: Error): void;
    /**
     * Manually disconnect this peer.
     */
    disconnect(): void;
    /**
     * Send a message over this peer.
     *
     * @param type -
     *   type of message to send
     * @param message -
     *   data of message
     * @returns
     *   promise that resolves when the message has been written
     */
    send<T extends PeerMessageType>(type: T, message: PeerMessage<T>): Promise<void>;
    /**
     * Write data to the peer via the current socket.
     *
     * @param type -
     *   type of message
     * @param payload -
     *   payload being sent
     * @returns
     *   promise that resolves when the write completes
     */
    private write;
}
//# sourceMappingURL=StreamingPeer.d.ts.map