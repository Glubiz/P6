/// <reference types="node" />
import { Transform, TransformCallback } from 'stream';
import { PeerMessage, PeerMessageType } from 'ataraxia-transport';
/**
 * Stream that will decode packets as they are received. Packets use a header
 * consisting of a packet length encoded as a CBOR number.
 */
export declare class PeerPacketDecodingStream extends Transform {
    private buffer;
    constructor();
    _transform(chunk: Buffer, encoding: string, callback: TransformCallback): void;
}
/**
 * Encode a full packet for a given message and data.
 *
 * @param type -
 *   type of message
 * @param data -
 *   data of message
 * @returns
 *   buffer with packet
 */
export declare function encodePeerPacket<T extends PeerMessageType>(type: T, data: PeerMessage<T>): Buffer;
//# sourceMappingURL=binaryStreams.d.ts.map