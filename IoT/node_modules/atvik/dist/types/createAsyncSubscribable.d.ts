import { AsyncSubscribable } from './AsyncSubscribable';
import { ErrorStrategy } from './ErrorStrategy';
import { EventIteratorOptions } from './EventIteratorOptions';
import { Listener } from './Listener';
/**
 * Function used to subscribe a listener.
 */
export declare type AsyncSubscribeFunction<This, Args extends any[]> = (listener: Listener<This, Args>) => Promise<void>;
/**
 * Function used to unsubscribe a listener, should return if the listener was
 * subscribed or not.
 */
export declare type AsyncUnsubscribeFunction<This, Args extends any[]> = (listener: Listener<This, Args>) => Promise<void>;
/**
 * Options for `createAsyncSubscribable`.
 */
export interface AsyncSubscribableOptions<This, Args extends any[]> {
    /**
     * Function used to subscribe a listener.
     */
    subscribe: AsyncSubscribeFunction<This, Args>;
    /**
     * Function used to unsubscribe a listener.
     */
    unsubscribe: AsyncUnsubscribeFunction<This, Args>;
    /**
     * Options to apply to iterators created by this subscribable.
     */
    defaultIterator?: EventIteratorOptions;
    /**
     * Default error strategy to use.
     */
    defaultErrorStrategy?: ErrorStrategy;
}
/**
 * Create a AsyncSubscribable instance that uses the give subscribe and
 * unsubscribe function to manage listeners.
 *
 * @param options -
 *   options used to create this async subscribable
 * @returns
 *   instance of `AsyncSubscribable`
 */
export declare function createAsyncSubscribable<This, Args extends any[]>(options: AsyncSubscribableOptions<This, Args>): AsyncSubscribable<This, Args>;
//# sourceMappingURL=createAsyncSubscribable.d.ts.map