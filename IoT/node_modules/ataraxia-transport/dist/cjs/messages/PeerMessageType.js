"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerMessageType = void 0;
/**
 * The types of data that a peer can send and receive.
 */
var PeerMessageType;
(function (PeerMessageType) {
    /**
     * Generic ok message. Used at certain points during the initial
     * negotiation with a peer.
     */
    PeerMessageType[PeerMessageType["Ok"] = 0] = "Ok";
    /**
     * Generic reject message.
     */
    PeerMessageType[PeerMessageType["Reject"] = 1] = "Reject";
    /**
     * Hello data, initial message sent from a server when a client connects.
     */
    PeerMessageType[PeerMessageType["Hello"] = 2] = "Hello";
    /**
     * Select message, sent from the client to the server after the client has
     * received and selected the capabilities it wants.
     */
    PeerMessageType[PeerMessageType["Select"] = 3] = "Select";
    /**
     * Bye, request a graceful disconnect from the peer.
     */
    PeerMessageType[PeerMessageType["Bye"] = 4] = "Bye";
    /**
     * Ping message, sent periodically by peers to make sure that other peers
     * know that they are available.
     */
    PeerMessageType[PeerMessageType["Ping"] = 5] = "Ping";
    /**
     * Pong message, sent as a reply when an incoming ping is received.
     */
    PeerMessageType[PeerMessageType["Pong"] = 6] = "Pong";
    /**
     * Authentication request, sent by the client after it has received an ok
     * for its select.
     */
    PeerMessageType[PeerMessageType["Auth"] = 7] = "Auth";
    /**
     * Additional authentication data, can be sent by both a client and a
     * server to provide additional data needed during authentication.
     */
    PeerMessageType[PeerMessageType["AuthData"] = 8] = "AuthData";
    /**
     * Message that indicates that the client is ready to begin receiving
     * messages.
     */
    PeerMessageType[PeerMessageType["Begin"] = 9] = "Begin";
    /**
     * Information about the nodes a peer sees.
     */
    PeerMessageType[PeerMessageType["NodeSummary"] = 10] = "NodeSummary";
    /**
     * Request for details about nodes.
     */
    PeerMessageType[PeerMessageType["NodeRequest"] = 11] = "NodeRequest";
    /**
     * Details about nodes.
     */
    PeerMessageType[PeerMessageType["NodeDetails"] = 12] = "NodeDetails";
    /**
     * Wrapped message to be forwarded.
     */
    PeerMessageType[PeerMessageType["Data"] = 13] = "Data";
    /**
     * Acknowledgment of having received data.
     */
    PeerMessageType[PeerMessageType["DataAck"] = 14] = "DataAck";
    /**
     * Rejection of data.
     */
    PeerMessageType[PeerMessageType["DataReject"] = 15] = "DataReject";
})(PeerMessageType = exports.PeerMessageType || (exports.PeerMessageType = {}));
//# sourceMappingURL=PeerMessageType.js.map