import { AsyncSubscribable } from './AsyncSubscribable';
import { AsyncSubscriptionFunctions } from './AsyncSubscriptionFunctions';
import { AsyncSubscriptionHandle } from './AsyncSubscriptionHandle';
import { ErrorStrategy } from './ErrorStrategy';
import { EventIteratorOptions } from './EventIteratorOptions';
import { Listener } from './Listener';
/**
 * Options that can be passed when creating an instance of {@link AsyncEvent}.
 */
export interface AsyncEventOptions {
    /**
     * The default options that are applied to iterators. Use this to setup
     * default limits and overflow behavior for iterators of this event.
     */
    defaultIterator?: EventIteratorOptions;
    /**
     * The error strategy to use by default. If not specified this will
     * default to {@link rethrowErrors}.
     */
    defaultErrorStrategy?: ErrorStrategy;
}
/**
 * An event that handles subscription in an asynchronous way.
 *
 * Each instance represents a single event:
 *
 * ```javascript
 * const event = new AsyncEvent(valueForThisInListeners);
 * ```
 *
 * The event can be emitted via the `emit` method:
 *
 * ```javascript
 * await event.emit('first-param', 'second-param');
 * ```
 *
 * Listeners can be added directly on the event, but it is recommended to
 * use `.subscribable` for any API that is public:
 *
 * ```javascript
 * // Adding a listener directly on the event
 * await event.subscribe(() => ...);
 *
 * // Subscribable provides a public API
 * await event.subscribable(() => ..)
 * await event.subscribable.subscribe(() => ...);
 * ```
 *
 * Listeners can be unsubscribed either via their handle or via the event:
 *
 * ```javascript
 * // Use handle for easier unsubscription
 * const handle = await event.addListener(() => ...);
 * await handle.unsubscribe();
 *
 * // Unsubscribe the actual listener
 * const listener = () => ...;
 * await eventOrSubscribable.subscribe(listener);
 * await eventOrSubscribable.unsubscribe(listener);
 * ```
 */
export declare class AsyncEvent<Parent, Args extends any[] = []> implements AsyncSubscriptionFunctions<Parent, Args> {
    /**
     * Public AsyncSubscribable that can safely be shared with consumers that
     * should be able to listen for events.
     */
    readonly subscribable: AsyncSubscribable<Parent, Args>;
    /**
     * Parent of this handler, used to apply the correct this to event listeners.
     */
    private readonly parent;
    /**
     * Listener(s) that have been attached to this event handler.
     */
    private registeredListeners?;
    /**
     * Monitor that will be notified on any listener change.
     */
    private monitor?;
    /**
     * Create a new event.
     *
     * @param parent -
     *   the parent that will be passed to listener as their `this`
     * @param options -
     *   options for this event
     */
    constructor(parent: Parent, options?: AsyncEventOptions);
    /**
     * Emit this event. This will invoke all of the listeners with the passed
     * arguments.
     *
     * @param args -
     *   arguments that listeners will receive
     */
    emit(...args: Args): Promise<void>;
    /**
     * Emit this event in parallel. This will invoke all of the listeners
     * with the passed arguments. Triggering of the listeners will done in
     * parallel.
     *
     * This method will not use the current {@link ErrorStrategy} and will
     * instead reject if an error occurs.
     *
     * @param args -
     *   arguments that the listeners will receive
     * @returns -
     *   promise that resolves when all listeners have handled the event
     */
    parallelEmit(...args: Args): Promise<void>;
    /**
     * Subscribe to this event using the given listener. The listener will
     * be invoked any time the event is emitted.
     *
     * @param listener -
     *   listener to subscribe
     * @returns
     *   promise
     */
    protected subscribe0(listener: Listener<Parent, Args>): Promise<void>;
    /**
     * Unsubscribe a listener from this handler. The specified listener will
     * no longer be invoked when the event is emitted.
     *
     * @param listener -
     *   listener to unsubscribe
     * @returns
     *   promise that resolves when the listener is removed
     */
    protected unsubscribe0(listener: Listener<Parent, Args>): Promise<void>;
    /**
     * Subscribe to this event using the given listener. The listener will
     * be invoked any time the event is emitted. The returned handle can be
     * used to unsubscribe.
     *
     * @param listener -
     *   listener to subscribe
     * @returns
     *   handle to the subscription, can be used to unsubscribe. Resolves
     *   when the subscription is fully registered
     */
    subscribe(listener: Listener<Parent, Args>): Promise<AsyncSubscriptionHandle>;
    /**
     * Unsubscribe a listener from this handler. The specified listener will
     * no longer be invoked when the event is emitted.
     *
     * @param listener -
     *   listener to unsubscribe
     * @returns
     *   promise that resolves when the listener is fully unsubscribed
     */
    unsubscribe(listener: Listener<Parent, Args>): Promise<void>;
    /**
     * Get a promise that will resolve the first time this event is fired
     * after this call.
     *
     * @returns
     *   listener that resolves the next time the event is emitted
     */
    once(): Promise<Args>;
    /**
     * Create a subscribable that will apply the specified filter to any
     * listeners added.
     *
     * @param filter -
     *   function used to filter events
     * @returns
     *   filtered `AsyncSubscribable`
     */
    filter(filter: (...args: Args) => boolean | Promise<boolean>): AsyncSubscribable<Parent, Args>;
    /**
     * Create a Subscribable that changes the this argument used for listeners.
     *
     * @param newThis -
     *   what should be treated as this for event listeners
     * @returns
     *   modified `AsyncSubscribable`
     */
    withThis<NewThis>(newThis: NewThis): AsyncSubscribable<NewThis, Args>;
    /**
     * Return an async iterator for this event.
     *
     * @returns
     *   async iterator for this event
     */
    [Symbol.asyncIterator](): AsyncIterator<Args, any, undefined>;
    /**
     * Create an iterator that supports async iteration of events emitted.
     *
     * @param options -
     *   options for this iterator
     * @returns
     *   iterable/iterator
     */
    iterator(options?: EventIteratorOptions): AsyncIterableIterator<Args>;
    /**
     * Get if there are any listeners available.
     *
     * @returns
     *   `true` if listeners are present
     */
    get hasListeners(): boolean;
    /**
     * Get a copy of the listeners as an array.
     *
     * @returns
     *   listeners as array
     */
    get listeners(): Listener<Parent, Args>[];
    /**
     * Clear all listeners for this event.
     */
    clear(): void;
    /**
     * Monitor for changes to listeners. Only a single monitor is supported at
     * a single time. This is intended to be used to react to if listeners are
     * currently registered. This can be used for things such as only listening
     * to events from other objects when this event is active.
     *
     * @param monitor -
     *   function used to monitor for changes to listeners
     */
    monitorListeners(monitor: (event: this) => void): void;
    /**
     * Stop monitoring for listener changes.
     */
    removeMonitor(): void;
}
//# sourceMappingURL=AsyncEvent.d.ts.map